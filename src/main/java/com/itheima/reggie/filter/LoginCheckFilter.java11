package com.itheima.reggie.filter;

import com.alibaba.fastjson.JSON;
import com.itheima.reggie.common.R;
import com.itheima.reggie.pojo.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.AntPathMatcher;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

//检查用户是否已经完成登录
@WebFilter(filterName = "loginCheckFilter",urlPatterns = "/*")
@Slf4j
//@ServletComponentScan
@Configuration
public class LoginCheckFilter extends HttpFilter {
    //路径匹配器,支持通配符
    public static final AntPathMatcher PATH_MATCHER=new AntPathMatcher();

    @Override
    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {
       //获取本次请求的uri
        String requestURI = request.getRequestURI();
        log.info("拦截到请求:{}",requestURI);
        //定义不需要处理的请求路径
        String [] urls=new String[]{
            "/employee/login",
                "/employee/logout",
                "/backend/**",
                "/front/**",
                "/common/**",
                "/category/**",
                "/shoppingCart/**",
                "/dish/**",
                "/addressBook/**",
                "/user/**",
                "/favicon.ico",
                "/order/**",
                "/demo/**"
        };
//        String[] urls = new String[]{
//                "/employee/login",
//                "/employee/logout",
//                "/backend/**",
////                "/front/**",
//                "/common/**",
//                "/user/sendMsg",
//                "/user/login"
//        };
        //判断本次请求是否需要处理
        boolean check = check(urls, requestURI);

        //如果不需要处理,直接放行
        if (check==true){
            log.info("本次请求{}不需要处理",requestURI);
            chain.doFilter(request,response);
            return;
        }
        //判断登录状态,如果已登录,则直接放行

        if(request.getSession().getAttribute("employee")!=null){
            log.info("用户已登录,用户id为",request.getSession().getAttribute("employee"));
            Long empId = (Long)request.getSession().getAttribute("employee");
            Long userId=(Long)request.getSession().getAttribute("user");
            User user=new User();
            user.setId(userId);
            chain.doFilter(request,response);
            return;
        }
        //4-2、判断登录状态，如果已登录，则直接放行
        if(request.getSession().getAttribute("user") != null){
            log.info("用户已登录，用户id为：{}",request.getSession().getAttribute("user"));

            Long userId = (Long) request.getSession().getAttribute("user");
            chain.doFilter(request,response);
            return;
        }
        log.info("用户未登录");
        //如果未登录则返回未登录结果,通过输出流方式向客户端页面响应数据
        response.getWriter().write(JSON.toJSONString(R.error("NOTLOGIN")));
        System.out.println((JSON.toJSONString(R.error("NOTLOGIN"))));
        return;
//        chain.doFilter(request,response);
    }
    //路径匹配,检查本次请求是否需要放行
    public boolean check(String[] urls,String requestURI){
        for (String url : urls) {
            boolean match = PATH_MATCHER.match(url, requestURI);
            if(match==true){
                return true;
            }
        }
        return false;
    }

//    @Override
//    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
//        HttpServletRequest request=(HttpServletRequest) servletRequest;
//        HttpServletResponse response=(HttpServletResponse) servletResponse;
//        log.info("拦截到请求:{}",request.getRequestURI());
//        filterChain.doFilter(request,response);
//
//    }
}
